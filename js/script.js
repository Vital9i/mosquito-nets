function showAlert(type, message) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show mt-3`;
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    
    const container = document.querySelector('.container') || document.body;
    container.prepend(alertDiv);
    
    setTimeout(() => {
        alertDiv.classList.remove('show');
        setTimeout(() => alertDiv.remove(), 150);
    }, 5000);
}



// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
document.addEventListener('DOMContentLoaded', function () {
    const mobileMenuBtn = document.getElementById('mobileMenuBtn');
    const navLinks = document.getElementById('navLinks');
    const navOverlay = document.getElementById('navOverlay');

    mobileMenuBtn.addEventListener('click', function () {
        navLinks.classList.toggle('active');
        navOverlay.classList.toggle('active');
        mobileMenuBtn.classList.toggle('active');

        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º –º–µ–Ω—é
        if (navLinks.classList.contains('active')) {
            document.body.style.overflow = 'hidden';
        } else {
            document.body.style.overflow = '';
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ overlay
    navOverlay.addEventListener('click', function () {
        navLinks.classList.remove('active');
        navOverlay.classList.remove('active');
        mobileMenuBtn.classList.remove('active');
        document.body.style.overflow = '';
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É
    document.querySelectorAll('.nav-links a').forEach(link => {
        link.addEventListener('click', () => {
            navLinks.classList.remove('active');
            navOverlay.classList.remove('active');
            mobileMenuBtn.classList.remove('active');
            document.body.style.overflow = '';
        });
    });
});

// –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
document.addEventListener('DOMContentLoaded', function () {
    const animateElements = document.querySelectorAll('.animate-on-scroll');

    // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    let animationInitialized = false;

    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -100px 0px'
    };

    const handleIntersection = (entries, observer) => {
        entries.forEach(entry => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –∏ –∞–Ω–∏–º–∞—Ü–∏—è –µ—â—ë –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª–∞—Å—å
            if (entry.isIntersecting && !entry.target.classList.contains('animated')) {
                const animationClass = entry.target.getAttribute('data-animation');
                const delay = entry.target.getAttribute('data-animation-delay') || '0s';

                entry.target.style.animationDelay = delay;
                entry.target.classList.add('animate__animated', animationClass, 'animated');

                // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–º
                observer.unobserve(entry.target);
            }
        });
    };

    const observer = new IntersectionObserver(handleIntersection, observerOptions);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    setTimeout(() => {
        animationInitialized = true;
        animateElements.forEach(element => {
            observer.observe(element);
        });
    }, 300); // 300ms –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
});



document.getElementById('orderForm').addEventListener('submit', function(e) {
    e.preventDefault();
    const form = e.target;
    const submitBtn = form.querySelector('button[type="submit"]');
    
    const BOT_TOKEN = '7964416791:AAEnhL9BeTD8WZDtK1vq7ZFC38fYeaUgpSU';
    const CHAT_ID = '-4782276187';
    
    const originalText = submitBtn.innerHTML;
    submitBtn.disabled = true;
    submitBtn.innerHTML = `
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        –û—Ç–ø—Ä–∞–≤–∫–∞...
    `;

    const formData = new FormData(form);
    const name = formData.get('name');
    let phone = formData.get('phone');
    const product = formData.get('product');
    const message = formData.get('message') || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';

    if (!name || !phone || !product) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalText;
        return;
    }

    // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –¥–ª—è —Å—Å—ã–ª–∫–∏ tel:
    const cleanPhone = phone.replace(/[^\d+]/g, '');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    const telegramMessage = `üì¢ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ç–∫—É</b>\n
üë§ <b>–ò–º—è:</b> ${name}\n
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <a href="tel:${cleanPhone}">${phone}</a>\n
üõçÔ∏è <b>–¢–∏–ø —Å–µ—Ç–∫–∏:</b> ${product}\n
üìù <b>–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> ${message}`;

    const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
    
    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            chat_id: CHAT_ID,
            text: telegramMessage,
            parse_mode: 'HTML',
            disable_web_page_preview: true
        })
    })

    .then(response => response.json())
    .then(data => {
        if (data.ok) {
            alert('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
            form.reset();
        } else {
            throw new Error(data.description || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞:', error);
        alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    })
    .finally(() => {
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalText;
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ)
document.querySelectorAll('.phone-link').forEach(link => {
    link.addEventListener('click', function(e) {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        console.log('Phone number clicked');
    });
});





